openapi: 3.0.0
info:
  version: 1.0.0
  title: Trackit API
  description: |
    Trackit is a lightweight task and schedule management API designed to help individuals manage daily responsibilities more effectively. 
    Users can organize tasks into projects, set deadlines, and update task status and priority as needed. 
    The API supports calendar-based overviews for better visibility and includes a notification system that alerts users to upcoming or delayed tasks. 
    With consistent response formatting and essential task management features, Trackit provides a structured yet flexible way to stay organized.

  termsOfService: https://trackit.example.com/terms
  contact:
    name: Trackit Support
    email: support@trackit.example.com
    url: https://trackit.example.com/support
  license:
    name: MIT license
    url: https://opensource.org/license/MIT
    
servers:
  - url: https://698a9017-e4ab-4ee7-82d7-f605859ad87f.mock.pstmn.io
    description: Postman Mock Server for Trackit API specification
  - url: https://api.trackit.example.com/v1
    description: Production server (v1)
      
tags:
  - name: Authentication
    description: User registration and login.
  - name: User
    description: Accessing and updating the authenticated user's profile.
  - name: Projects
    x-displayname: Project Management
    description: Creating, updating, retrieving, and deleting projects.
  - name: Tasks
    description: Managing tasks under specific projects.
  - name: Overview
    description: Retrieving task overviews in list or calendar formats.
  - name: Notifications
    description: Retrieving and managing system-generated notifications related to task deadlines, delays, and updates.

security:
  - bearerAuth: []
  
paths:
  /v1/register:
    post:
      tags:
        - Authentication
      summary: Register a New User
      description: Creates a new user account using email and password credentials.
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: password123
                name: 
                  type: string
                  example: John Doe
                nickname:
                  type: string
                  example: WriterJohn
                  description: Optional nickname to be displayed in the application. If not provided, the name or a default label will be shown.
            example:
              email: johndoe@example.com
              password: password123
              name: John Doe
              nickname: WriterJohn
      responses:
        '201':
          description: User successfully registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: User registered successfully.
                  userId:
                    type: string
                    example: user_12345
              example:
                code: 201
                message: User registered successfully.
                userId: user_12345
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'
                

  /v1/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Authenticates a user and returns a JWT token if credentials are valid.
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: password123
            example:
              email: johndoe@example.com
              password: password123
      responses:
        '200':
          description: User authenticated and token returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Login successful.
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              example:
                code: 200
                message: Login successful.
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /v1/me:
    get:
      tags:
        - User
      summary: Get Current User Profile
      description: Returns the profile information of the authenticated user.
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: User information retrieved successfully.
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: user_12345
                      name:
                        type: string
                        example: John Doe
                      nickname:
                        type: string
                        example: WriterJohn
                      email:
                        type: string
                        format: email
                        example: johndoe@example.com
              example:
                meta:
                  code: 200
                  message: User information retrieved successfully.
                data:
                  userId: user_12345
                  name: John Doe
                  nickname: WriterJohn
                  email: johndoe@example.com
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    patch:
      tags:
        - User
      summary: Update Current User Profile
      description: Updates the authenticated user's profile (name and nickname).
      operationId: updateCurrentUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: Jonathan Doe
                nickname:
                  type: string
                  example: SuperWriter
              anyOf:
                - required: [name]
                - required: [nickname]
            example:
              name: Jonathan Doe
              nickname: SuperWriter
      responses:
        '200':
          description: User's profile updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code: 
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: User's profile updated successfully.
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: user_12345
                      name:
                        type: string
                        example: Jonathan Doe
                      nickname:
                        type: string
                        example: SuperWriter
                      email:
                        type: string
                        format: email
                        example: johndoe@example.com
              example:
                meta:
                  code: 200
                  message: User's profile updated successfully.
                data:
                  userId: user_12345
                  name: Jonathan Doe
                  nickname: SuperWriter
                  email: johndoe@example.com
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /v1/me/profile-image:
    post:
      tags:
       - User
      summary: Upload or Update Profile Image
      description: Uploads a new profile image for the authenticated user.
      operationId: uploadProfileImage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - profileImage
              properties:
                profileImage:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile image updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Profile image updated successfully.
                  data:
                    type: object
                    properties:
                      imageUrl:
                        type: string
                        example: https://cdn.trackit.example.com/profile/user_12345.jpg
              example: 
                meta:
                  code: 200
                  message: Profile image updated successfully.
                data:
                  imageUrl: https://cdn.trackit.example.com/profile/user_12345.jpg
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/projects:
    post:
      tags:
        - Projects
      summary: Create a New Project
      description: Creates a new project under the authenticated user's account.
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - color
              properties:
                title:
                  type: string
                  example: Daily Life
                color:
                  type: string
                  example: "#87CEFA"
                isDeletable:
                  type: boolean
                  example: true
            example:
              title: Daily Life
              color: "#87CEFA"
              isDeletable: true
      responses:
        '201':
          description: Project created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code: 
                        type: integer
                        example: 201
                      message:
                        type: string
                        example: Project created successfully.
                  data:
                    type: object
                    properties:
                      projectId:
                        type: string
                        example: proj_123
                      title:
                        type: string
                        example: Car Maintenance
                      color:
                        type: string
                        example: "#87CEFA"
                      isDeletable:
                        type: boolean
                        example: true
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-04-17T12:00:00Z
              example:
                meta:
                  code: 201
                  message: Project created successfully.
                data:
                  projectId: proj_123
                  title: Car Maintenance
                  color: "#87CEFA"
                  isDeletable: true
                  createdAt: 2025-04-17T12:00:00Z
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '422':
          $ref: '#/components/responses/UnprocessableEntityError'

    get:
      tags:
        - Projects
      summary: Get All Projects
      description: Retrieves all projects created by the authenticated user.
      operationId: getAllProjects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Project list returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: All projects returned successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        projectId:
                          type: string
                          example: proj_001
                        title:
                          type: string
                          example: Work
                        color:
                          type: string
                          example: "#FF6B6B"
                        isDeletable:
                          type: boolean
                          example: true
                        createdAt:
                          type: string
                          format: date-time
                          example: 2025-04-17T09:00:00Z
              example:
                meta:
                  code: 200
                  message: All projects retrieved successfully.
                data:
                  - projectId: proj_001
                    title: Work
                    color: "#FF6B6B"
                    isDeletable: true
                    createdAt: 2025-04-17T09:00:00Z
                  - projectId: proj_002
                    title: Daily Life
                    color: #4FC3F7
                    isDeletable: true
                    createdAt: 2025-04-17T09:02:00Z
                  - projectId: proj_003
                    title: Free Time
                    color: "#BA68C8"
                    isDeletable: true
                    createdAt: 2025-04-17T09:03:00Z
                  - projectId: proj_004
                    title: Pet Care
                    color: "#FFD54F"
                    isDeletable: false
                    createdAt: 2025-04-17T09:04:00Z
                  - projectId: proj_005
                    title: Car Maintenance
                    color: "#87CEFA"
                    isDeletable: true
                    createdAt: 2025-04-17T09:04:00Z
        '401':
          $ref: '#/components/responses/ValidationError'

  /v1/projects/{projectId}:
    patch:
      tags:
        - Projects
      summary: Update Project
      description: Updates the title, color, or deletable status of an existing project.
      operationId: updateProject
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique ID of the project to update
          schema:
            type: string
            example: proj_003
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Project Title
                color:
                  type: string
                  example: "#009688"
                isDeletable:
                  type: boolean
                  example: true
              anyOf:
                - required: [title]
                - required: [color]
                - required: [isDeletable]
            example:
              title: Updated Project Title
              color: "#009688"
      responses:
        '200':
          description: Project updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code: 
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Project updated successfully.
                  data:
                    type: object
                    properties:
                      projectId:
                        type: string
                        example: proj_003
                      title: 
                        type: string
                        example: Updated Project Title
                      color:
                        type: string
                        example: "#009688"
                      isDeletable:
                        type: boolean
                        example: true
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-04-17T14:00:00Z
              example: 
                meta:
                  code: 200
                  message: Project updated successfully.
                data:
                  projectId: proj_003
                  title: Updated Project Title
                  color: "#009688"
                  isDeletable: true
                  updatedAt: 2025-04-17T14:00:00Z
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Projects
      summary: Delete a project
      description: Deletes the specified project if it is deletable and owned by the authenticated user.
      operationId: deleteProject
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique ID of the project to delete.
          schema:
            type: string
            example: proj_005
      responses:
        '204':
          description: Project deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCodeResponse'
              example:
                code: 204
                message: Project deleted successfully.
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /v1/projects/{projectId}/tasks:
    post:
      tags:
        - Tasks
      summary: Create a New Task in a Project
      description: Creates a new task under the specified project.
      operationId: createTask
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique ID of the project
          schema:
            type: string
            example: proj_001
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required:
                - title
                - dueDate
                - status
              properties:
                title:
                  type: string
                  example: Finish outline for new novel
                description:
                  type: string
                  example: Initial draft of chapter structure
                dueDate:
                  type: string
                  format: date-time
                  example: 2025-04-20T18:00:00Z
                status:
                  type: string
                  enum: [not-started, in-progress, completed, delayed]
                  example: not-startted
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: high
            example:
              title: Finish outline for new novel
              description: Initial draft of chapter structure
              dueDate: 2025-04-20T18:00:00Z
              status: not-started
              priority: high
      responses:
        '201':
          description: Task created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 201
                      mesesage:
                        type: string
                        example: Task created successfully.
                  data:
                    type: object
                    properties:
                      taskId:
                        type: string
                        example: task_001
                      title: 
                        type: string
                        example: Finish outline for new novel
                      description:
                        type: string
                        example: Initial draft of chapter structure
                      dueDate:
                        type: string
                        format: date-time
                        example: 2025-04-20T18:00:00Z
                      status:
                        type: string
                        example: not-started
                      priority:
                        type: string
                        example: high
                      projectId:
                        type: string
                        example: proj_001
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-04-17T15:00:00Z
              example:
                meta:
                  code: 201
                  message: Task created successfully.
                data:
                  taskId: task_001
                  title: Finish outline for new novel
                  description: Initial draft of chapter structure
                  dueDate: 2025-04-20T18:00:00Z
                  status: not-started
                  priority: high
                  projectId: proj_001
                  createdAt: 2025-04-17T15:00:00Z
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/UnprocessableEntityError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

    get:
      tags:
        - Tasks
      summary: Get Tasks in a Project
      description: |
        Retrieves a list of tasks under the specified project. The response will include only tasks belonging to the specified `projectId`. The example shown includes task from all defined projects (proj_001 to proj_005) for demonstration purposes.
      operationId: getProjectTasks
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique ID of the project
          schema:
            type: string
            example: proj_001
      responses:
        '200':
          description: Task list retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Task list retrieved successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        taskId:
                          type: string
                          example: task_001
                        title: 
                          type: string
                          example: Write outline
                        description:
                          type: string
                          example: Plan the structure of the upcoming article.
                        dueDate:
                          type: string
                          format: date-time
                          example: 2025-04-20T08:00:00Z
                        status:
                          type: string
                          example: not-started
                        priority:
                          type: string
                          example: high
                        projectId:
                          type: string
                          example: proj_001
                        createdAt:
                          type: string
                          format: date-time
                          example: 2025-04-17T09:00:00Z
              example:
                meta:
                  code: 200
                  message: Tasks retrieved successfully.
                data:
                  - taskId: task_001
                    title: Write outline
                    description: Plan the structure of the upcoming article
                    dueDate: 2025-05-20T08:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_001
                    createdAt: 2025-04-17T09:00:00Z
                  - taskId: task_002
                    title: Meet with publisher
                    description: Discuss marketing strategies for the next release
                    dueDate: 2025-04-21T10:30:00Z
                    status: in-progress
                    projectId: proj_001
                    createdAt: 2025-04-17T09:10:00Z
                  - taskId: task_003
                    title: Finalize research
                    description: Wrap up findings for the concept of new novel.
                    dueDate: 2025-04-22T13:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_001
                    createdAt: 2025-04-17T09:20:00Z
                  - taskId: task_004
                    title: Draft writing
                    description: Start the first draft of chapter one.
                    dueDate: 2025-04-24T09:00:00Z
                    status: delayed
                    priority: medium
                    projectId: proj_001
                    createdAt: 2025-04-17T09:30:00Z
                  - taskId: task_005
                    title: Review references
                    description: Confirm sources and citations
                    dueDate: 2025-04-25T11:00:00Z
                    status: not-started
                    priority: low
                    projectId: proj_001
                    createdAt: 2025-04-17T09:40:00Z
                  - taskId: task_006
                    title: Grocery shopping
                    description: Onion, pickle, olive, croissant, tomatoes, milk, eggs
                    dueDate: 2025-04-20T11:00:00Z
                    priority: medium
                    projectId: proj_002
                    createdAt: 2025-04-17T10:00:00Z
                  - taskId: task_007
                    title: Clean the garage
                    description: Sweep and organize tools
                    dueDate: 2025-04-20T14:00:00Z
                    status: in-progress
                    priority: low
                    projectId: proj_002
                    createdAt: 2025-04-17T10:10:00Z
                  - taskId: task_008
                    title: Take out recycling
                    description: Every Tuesday - Don't forget the bins!
                    dueDate: 2025-04-21T07:00:00Z
                    status: completed
                    priority: low
                    projectId: proj_002
                    createdAt: 2025-04-17T10:20:00Z
                  - taskId: task_009
                    title: Bake a pecan pie
                    description: For Joy - special occasion
                    dueDate: 2025-04-22T16:00:00Z
                    status: not-started
                    priority: medium
                    projectId: proj_002
                    createdAt: 2025-04-17T10:30:00Z
                  - taskId: task_010
                    title: Running
                    description: Every morning at 7
                    dueDate: 2025-04-23T07:00:00Z
                    status: in-progress
                    priority: high
                    projectId: proj_003
                    createdAt: 2025-04-17T11:00:00Z
                  - taskId: task_011
                    title: Go to bookstore
                    description: Spend an hour browsing new releases
                    dueDate: 2025-04-23T15:00:00Z
                    status: not-started
                    priority: medium
                    projectId: proj_003
                    createdAt: 2025-04-17T11:10:00Z
                  - taskId: task_012
                    title: Play golf
                    description: Friday afternoon tee time
                    dueDate: 2025-04-26T14:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_003
                    createdAt: 2025-04-17T11:20:00Z
                  - taskId: task_013
                    title: Visit grandma
                    description: Bring flowers and snacks
                    dueDate: 2025-04-27T11:00:00Z
                    status: completed
                    priority: medium
                    projectId: proj_003
                    createdAt: 2025-04-17T11:30:00Z
                  - taskId: task_014
                    title: Food for Blue
                    description: Buy dry food and treats
                    dueDate: 2025-04-24T17:00:00Z
                    status: not-started
                    priority: medium
                    projectId: proj_004
                    createdAt: 2025-04-17T12:00:00Z
                  - taskId: task_015
                    title: Annual vet check
                    description: Appointment at 2PM
                    dueDate: 2025-04-25T14:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_004
                    createdAt: 2025-04-17T12:10:00Z
                  - taskId: task_016
                    title: Walk Blue
                    description: 20 minutes each evening
                    dueDate: 2025-04-23T19:00:00Z
                    status: in-progress
                    priority: medium
                    projectId: proj_004
                    createdAt: 2025-04-17T19:00:00Z
                  - taskId: task_017
                    title: Cut Blue's hair
                    description: Grooming on Wednesday
                    dueDate: 2025-04-24T16:00:00Z
                    status: not-started
                    priority: low
                    projectId: proj_004
                    createdAt: 2025-04-17T12:30:00Z
                  - taskId: task_018
                    title: Regular checkup
                    description: Take the car to the mechanic
                    dueDate: 2025-04-24T09:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_005
                    createdAt: 2025-04-17T13:00:00Z
                  - taskId: task_019
                    title: Oil change
                    description: Schedule and complete oil change
                    dueDate: 2025-04-25T13:00:00Z
                    status: not-started
                    priority: medium
                    projectId: proj_005
                    createdAt: 2025-04-17T13:10:00Z
                  - taskId: task_020
                    title: Wash the car
                    description: Visit car wash by the weekend
                    dueDate: 2025-04-26T10:00:00Z
                    status: not-started
                    priority: low
                    projectId: proj_005
                    createdAt: 2025-04-17T13:20:00Z
                    
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

  /v1/tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get Task by ID
      description: Retrieves a single task using its unique `taskId`.
      operationId: getTaskById
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: Unique ID of the task
          schema:
            type: string
            example: task_001
      responses:
        '200':
          description: Task retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message: 
                        type: string
                        example: Task retrieved successfully.
                  data:
                    type: object
                    properties:
                      taskId:
                        type: string
                        example: task_001
                      title:
                        type: string
                        example: Write outline
                      description: 
                        type: string
                        example: Plan the structure of the upcoming article
                      dueDate:
                        type: string
                        format: date-time
                        example: 2025-05-20T08:00:00Z
                      status:
                        type: string
                        example: not-started
                      priority:
                        type: string
                        example: high
                      projectId:
                        type: string
                        example: proj_001
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-04-17T09:00:00Z
              example:
                meta:
                  code: 200
                  message: Task retrieved successfully.
                data:
                  taskId: task_001
                  title: Write outline
                  description: Plan the structure of the upcoming article
                  dueDate: 2025-05-20T08:00:00Z
                  status: not-started
                  priority: high
                  projectId: proj_001
                  createdAt: 2025-04-17T09:00:00Z
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

    patch:
      tags:
        - Tasks
      summary: Update Task
      description: Updates one or more fields of a task identified by its taskId.
      operationId: updateTaskById
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: Unique ID of the task
          schema:
            type: string
            example: task_004
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated draft title
                description:
                  type: string
                  example: Start the first draft of chapter one.
                dueDatE:
                  type: string
                  format: date-time
                  example: 2025-04-24T09:00:00Z
                status:
                  type: string
                  enum: [not-started, in-progress, completed, delayed]
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: medium
            example:
              title: Updated draft title
              status: in-progress
      responses:
        '200':
          description: Task updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties: 
                  meta:
                    type: object
                    properties:
                      code: 
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Task updated successfully.
                  data:
                    type: object
                    properties:
                      taskId:
                        type: string
                        example: task_004
                      title:
                        type: string
                        example: Updated draft title
                      description:
                        type: string
                        example: Start the first draft of chapter one.
                      dueDate:
                        type: string
                        format: date-time
                        example: 2025-04-24T09:00:00Z
                      status:
                        type: string
                        example: in-progress
                      priority:
                        type: string
                        example: medium
                      projectId:
                        type: string
                        example: proj_001
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-04-17T09:30:00Z
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/UnprocessableEntityError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
    
    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: Deletes a task by its unique `taskId`.
      operationId: deleteTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: Unique ID of the task to delete
          schema:
            type: string
            example: task_001
      responses:
        '204':
          description: Task deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCodeResponse'
              example:
                code: 204
                message: Task deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/tasks/overview:
    get:
      tags:
        - Overview
      summary: Get All Tasks Overview (Calendar View)
      description: |
        Retrieves all tasks belonging to the authenticated user, optionally filtered by date range, status, or project. Useful for building a calendar or dashboard overview of scheduled tasks.
      operationId:  getTaskOverview
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          description: Start date for filtering tasks (ISO 8601 format)
          schema:
            type: string
            format: date
            example: 2025-04-20
        - name: endDate
          in: query
          required: false
          description: End date for filtering tasks (ISO 8601 format)
          schema:
            type: string
            format: date
            example: 2025-04-30
        - name: status
          in: query
          required: false
          description: Filter by task status
          schema:
            type: string
            enum: [not-started, in-progress, completed, delayed]
            example: not-started
        - name: projectId
          in: query
          required: false
          description: Filter by project ID
          schema:
            type: string
            example: proj_002
      responses:
        '200':
          description: Tasks overview retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Tasks overview retrieved successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        taskId:
                          type: string
                          example: task_006
                        title:
                          type: string
                          example: Grocery shopping
                        dueDate:
                          type: string
                          format: date-time
                          example: 2025-04-20T11:00:00Z
                        status:
                          type: string
                          example: not-started
                        priority:
                          type: string
                          example: medium
                        projectId:
                          type: string
                          example: proj_002
              example:
                meta:
                  code: 200
                  message: Tasks overview retrieved successfully.
                data:
                  - taskId: task_001
                    title: Write outline
                    description: Plan the structure of the upcoming article
                    dueDate: 2025-05-20T08:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_001
                  - taskId: task_002
                    title: Meet with publisher
                    description: Discuss marketing strategies for the next release
                    dueDate: 2025-04-21T10:30:00Z
                    status: in-progress
                    projectId: proj_001
                  - taskId: task_003
                    title: Finalize research
                    description: Wrap up findings for the concept of new novel.
                    dueDate: 2025-04-22T13:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_001
                  - taskId: task_004
                    title: Draft writing
                    description: Start the first draft of chapter one.
                    dueDate: 2025-04-24T09:00:00Z
                    status: delayed
                    priority: medium
                    projectId: proj_001
                  - taskId: task_005
                    title: Review references
                    description: Confirm sources and citations
                    dueDate: 2025-04-25T11:00:00Z
                    status: not-started
                    priority: low
                    projectId: proj_001
                  - taskId: task_006
                    title: Grocery shopping
                    description: Onion, pickle, olive, croissant, tomatoes, milk, eggs
                    dueDate: 2025-04-20T11:00:00Z
                    priority: medium
                    projectId: proj_002
                  - taskId: task_007
                    title: Clean the garage
                    description: Sweep and organize tools
                    dueDate: 2025-04-20T14:00:00Z
                    status: in-progress
                    priority: low
                    projectId: proj_002
                  - taskId: task_008
                    title: Take out recycling
                    description: Every Tuesday - Don't forget the bins!
                    dueDate: 2025-04-21T07:00:00Z
                    status: completed
                    priority: low
                    projectId: proj_002
                  - taskId: task_009
                    title: Bake a pecan pie
                    description: For Joy - special occasion
                    dueDate: 2025-04-22T16:00:00Z
                    status: not-started
                    priority: medium
                    projectId: proj_002
                  - taskId: task_010
                    title: Running
                    description: Every morning at 7
                    dueDate: 2025-04-23T07:00:00Z
                    status: in-progress
                    priority: high
                    projectId: proj_003
                  - taskId: task_011
                    title: Go to bookstore
                    description: Spend an hour browsing new releases
                    dueDate: 2025-04-23T15:00:00Z
                    status: not-started
                    priority: medium
                    projectId: proj_003
                  - taskId: task_012
                    title: Play golf
                    description: Friday afternoon tee time
                    dueDate: 2025-04-26T14:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_003
                  - taskId: task_013
                    title: Visit grandma
                    description: Bring flowers and snacks
                    dueDate: 2025-04-27T11:00:00Z
                    status: completed
                    priority: medium
                    projectId: proj_003
                  - taskId: task_014
                    title: Food for Blue
                    description: Buy dry food and treats
                    dueDate: 2025-04-24T17:00:00Z
                    status: not-started
                    priority: medium
                    projectId: proj_004
                  - taskId: task_015
                    title: Annual vet check
                    description: Appointment at 2PM
                    dueDate: 2025-04-25T14:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_004
                  - taskId: task_016
                    title: Walk Blue
                    description: 20 minutes each evening
                    dueDate: 2025-04-23T19:00:00Z
                    status: in-progress
                    priority: medium
                    projectId: proj_004
                  - taskId: task_017
                    title: Cut Blue's hair
                    description: Grooming on Wednesday
                    dueDate: 2025-04-24T16:00:00Z
                    status: not-started
                    priority: low
                    projectId: proj_004
                  - taskId: task_018
                    title: Regular checkup
                    description: Take the car to the mechanic
                    dueDate: 2025-04-24T09:00:00Z
                    status: not-started
                    priority: high
                    projectId: proj_005
                  - taskId: task_019
                    title: Oil change
                    description: Schedule and complete oil change
                    dueDate: 2025-04-25T13:00:00Z
                    status: not-started
                    priority: medium
                    projectId: proj_005
                  - taskId: task_020
                    title: Wash the car
                    description: Visit car wash by the weekend
                    dueDate: 2025-04-26T10:00:00Z
                    status: not-started
                    priority: low
                    projectId: proj_005
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  
  /v1/notifications:
    get:
      tags:
        - Notifications
      summary: Get Notifications for the Authenticated User
      description: |
        Retrieves a list of notifications related to upcoming or overdue tasks, or system-generated task alerts.
      operationId: getUserNotifications
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notification list retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code: 
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Notifications retrieved successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        notificationId:
                          type: string
                          example: n_001
                        taskId:
                          type: string
                          example: task_004
                        type:
                          type: string
                          enum: [due-soon, delayed, custom]
                          example: due-soon
                        messsage:
                          type: string
                          example:  Your task 'Draft writing' is due tomorrow.
                        read:
                          type: boolean
                          example: false
                        createdAt:
                          type: string
                          format: date-time
                          example: 2025-04-23T08:00:00Z
              example:
                meta:
                  code: 200
                  message: Notifications retrieved successfully.
                data:
                  - notificationId: n_001
                    taskId: task_004
                    type: due-soon
                    message: Your task 'Draft writing' is due tomorrow.
                    read: false
                    createdAt: 2025-04-23T08:00:00Z
                  - notificationId: n_002
                    taskId: task_005
                    type: delayed
                    message: Your task 'Review references' is delayed.
                    read: true
                    createdAt: 2025-04-22T12:00:00Z
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

  /v1/notifications/{notificationId}:
    patch:
      tags:
        - Notifications
      summary: Mark Notification as Read
      description: |
        Mark the specified notification as read. 
        This helps the user keep track of which notifications have been acknowledged.
      operationId:  markNotificationRead
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          description: Unique ID of the notification to update
          schema:
            type: string
            example: n_001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                read:
                  type: boolean
                  example: true
            example:
              read: true
      responses:
        '200':
          description: Notification marked as read.
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Notification marked as read.
                  data:
                    type: object
                    properties:
                      notificationId:
                        type: string
                        example: n_001
                      taskId: 
                        type: string
                        example: task_004
                      read:
                        type: boolean
                        example: true
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-04-23T12:00:00Z
              example:
                meta:
                  code: 200
                  message: Notification marked as read.
                data:
                  notificationId: n_001
                  taskId: task_004
                  read: true
                  updatedAt: 2025-04-23T12:00:00Z
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
                



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    StatusCodeResponse:
      type: object
      properties:
        code:
          type: integer
          example: 401
        message:
          type: string
          example: "Authentication token is missing or invalid."
          
  responses:
    SuccessResponse:
      description: Standard response for successful operations (e.g., deletions).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusCodeResponse'
          example:
            code: 204
            message: "Successfully deleted. No content returned."
    
    ValidationError:
      description: The request contains invalid or missing input fields.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusCodeResponse'
          example:
            code: 400
            message: "Required field is missing."
            
    UnauthorizedError:
      description: The request is missing a valid authentication token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusCodeResponse'
          example:
            code: 401
            message: "Authentication token is missing or invalid."
    
    ForbiddenError:
      description: User do not have access to this resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusCodeResponse'
          example:
            code: 403
            message: "You are not authorized to access this resource."
  
    NotFoundError:
      description: The requested resource does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusCodeResponse'
          example:
            code: 404
            message: "Resource not found."
  
    ConflictError:
      description: Resource already exists or duplicate detected.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusCodeResponse'
          example:
            code: 409
            message: "The field is already in use."

    UnprocessableEntityError:
      description: Validation failed for the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusCodeResponse'
          example:
            code: 422
            message: "Content must be at least 1 characters."
    
    InternalServerError:
      description: Something went wrong on internal server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusCodeResponse'
          example:
            code: 500
            message: "The server has encountered an unexpected condition that prevented it from fulfilling the request."
    
    ServiceUnavailableError:
      description: The server is currently unable to handle the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusCodeResponse'
          example:
            code: 503
            message: "The server is temporarily unavailable."
